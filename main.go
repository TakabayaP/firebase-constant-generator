package main

import (
	"fmt"
	"go/ast"
	"go/parser"
	"go/token"
	"os"
	"path/filepath"

	"github.com/dave/jennifer/jen"
	"github.com/fatih/structtag"
)

func main() {
	args := map[string]string{}
	for i := 1; i < len(os.Args); i++ {
		if os.Args[i][0] == '-' {
			args[os.Args[i]] = os.Args[i+1]
		}
	}
	sourceFile := args["--source"]
	fmt.Println("fbtypegen Source:", sourceFile)
	fset := token.NewFileSet()
	f, err := parser.ParseFile(fset, sourceFile, nil, parser.Mode(0))
	if err != nil {
		fmt.Println(err)
		return
	}

	writeFilePath := filepath.Join(
		filepath.Dir(sourceFile),
		"types.go",
	)
	writeFileF, err := os.OpenFile(writeFilePath, os.O_WRONLY|os.O_CREATE, 0666)
	if err != nil {
		panic(err)
	}
	writeFile := jen.NewFile(f.Name.Name)
	var defs []jen.Code
	var structName string
	ast.Inspect(f, func(n ast.Node) bool {
		if v, ok := n.(*ast.TypeSpec); ok {
			structName = v.Name.Name
		}
		if v, ok := n.(*ast.StructType); ok {
			for _, field := range v.Fields.List {
				tags, err := structtag.Parse(field.Tag.Value[1 : len(field.Tag.Value)-1])
				if err != nil {
					panic(err)
				}
				tag, err := tags.Get("firestore")
				if err != nil {
					fmt.Println(err)
					continue
				}
				defs = append(defs,
					jen.Id(structName+field.Names[0].Name).
						String().
						Op("=").
						Lit(structName+tag.Name))
			}
		}
		return true
	})
	writeFile.PackageComment("Code generated by fbtypegen. DO NOT EDIT.")
	writeFile.Const().Defs(defs...)
	writeFile.Render(writeFileF)
}
